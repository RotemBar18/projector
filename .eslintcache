[{"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\index.js":"1","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\reportWebVitals.js":"2","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\serviceWorkerRegistration.js":"3","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\store.js":"4","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\App.jsx":"5","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\routes.js":"6","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\Home.jsx":"7","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\BoardPage.jsx":"8","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\BoardDetails.jsx":"9","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\LoginSignup.jsx":"10","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\Header.jsx":"11","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\reducers\\index.js":"12","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\Group.jsx":"13","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\TaskDetails.jsx":"14","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\actions\\boardActions.js":"15","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\taskService.js":"16","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\groupService.js":"17","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\labelService.js":"18","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\actions\\userActions.js":"19","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\TaskList.jsx":"20","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\GroupOptions.jsx":"21","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\utilService.js":"22","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\BoardList.jsx":"23","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\reducers\\boardReducer.js":"24","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\reducers\\userReducer.js":"25","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\boardService.js":"26","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\TaskPreview.jsx":"27","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\LabelEdit.jsx":"28","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\userService.js":"29","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\asyncStorageService.js":"30","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\LabelPreview.jsx":"31","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\TaskOptions.jsx":"32","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\BoardCreate.jsx":"33","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\BoardPreview.jsx":"34","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\LabelsList.jsx":"35","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\httpService.js":"36"},{"size":1024,"mtime":1622107116635,"results":"37","hashOfConfig":"38"},{"size":377,"mtime":1622107116643,"results":"39","hashOfConfig":"38"},{"size":5201,"mtime":1622107116646,"results":"40","hashOfConfig":"38"},{"size":323,"mtime":1622107116682,"results":"41","hashOfConfig":"38"},{"size":444,"mtime":1622288139262,"results":"42","hashOfConfig":"38"},{"size":534,"mtime":1622297290060,"results":"43","hashOfConfig":"38"},{"size":796,"mtime":1622290095525,"results":"44","hashOfConfig":"38"},{"size":1403,"mtime":1622308133429,"results":"45","hashOfConfig":"38"},{"size":5786,"mtime":1622307515499,"results":"46","hashOfConfig":"38"},{"size":5398,"mtime":1622306020509,"results":"47","hashOfConfig":"38"},{"size":1427,"mtime":1622297290047,"results":"48","hashOfConfig":"38"},{"size":242,"mtime":1622107116680,"results":"49","hashOfConfig":"38"},{"size":3733,"mtime":1622307515480,"results":"50","hashOfConfig":"38"},{"size":10607,"mtime":1622315662768,"results":"51","hashOfConfig":"38"},{"size":1668,"mtime":1622293043486,"results":"52","hashOfConfig":"38"},{"size":4209,"mtime":1622327050217,"results":"53","hashOfConfig":"38"},{"size":611,"mtime":1622307154915,"results":"54","hashOfConfig":"38"},{"size":840,"mtime":1622307515504,"results":"55","hashOfConfig":"38"},{"size":1574,"mtime":1622107116675,"results":"56","hashOfConfig":"38"},{"size":761,"mtime":1622307515486,"results":"57","hashOfConfig":"38"},{"size":725,"mtime":1622286556390,"results":"58","hashOfConfig":"38"},{"size":973,"mtime":1622285922180,"results":"59","hashOfConfig":"38"},{"size":403,"mtime":1622235731546,"results":"60","hashOfConfig":"38"},{"size":758,"mtime":1622117585393,"results":"61","hashOfConfig":"38"},{"size":625,"mtime":1622107116681,"results":"62","hashOfConfig":"38"},{"size":834,"mtime":1622293063749,"results":"63","hashOfConfig":"38"},{"size":3346,"mtime":1622327050213,"results":"64","hashOfConfig":"38"},{"size":3941,"mtime":1622327050209,"results":"65","hashOfConfig":"38"},{"size":2285,"mtime":1622107116664,"results":"66","hashOfConfig":"38"},{"size":21022,"mtime":1622314416867,"results":"67","hashOfConfig":"38"},{"size":265,"mtime":1622130944848,"results":"68","hashOfConfig":"38"},{"size":2912,"mtime":1622327050211,"results":"69","hashOfConfig":"38"},{"size":2922,"mtime":1622307155262,"results":"70","hashOfConfig":"38"},{"size":499,"mtime":1622304395376,"results":"71","hashOfConfig":"38"},{"size":2247,"mtime":1622307515485,"results":"72","hashOfConfig":"38"},{"size":1030,"mtime":1622307154921,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1s0bt88",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\index.js",[],["150","151"],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\reportWebVitals.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\serviceWorkerRegistration.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\store.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\App.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\routes.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\Home.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\BoardPage.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\BoardDetails.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\LoginSignup.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\Header.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\reducers\\index.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\Group.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\pages\\TaskDetails.jsx",["152"],"import { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Avatar, TextField, Input, Grid } from '@material-ui/core';\r\nimport AvatarGroup from '@material-ui/lab/AvatarGroup';\r\nimport CloseOutlinedIcon from '@material-ui/icons/CloseOutlined';\r\nimport AssignmentOutlinedIcon from '@material-ui/icons/AssignmentOutlined';\r\nimport PersonOutlineOutlinedIcon from '@material-ui/icons/PersonOutlineOutlined';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport ListOutlinedIcon from '@material-ui/icons/ListOutlined';\r\nimport TodayOutlinedIcon from '@material-ui/icons/TodayOutlined';\r\nimport AttachFileOutlinedIcon from '@material-ui/icons/AttachFileOutlined';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport DoneOutlinedIcon from '@material-ui/icons/DoneOutlined';\r\n\r\nimport { saveBoard } from '../store/actions/boardActions.js';\r\nimport { taskService } from '../services/taskService.js';\r\nimport { utilService } from '../services/utilService.js';\r\nimport { LabelPreview } from '../cmps/LabelPreview.jsx';\r\nimport { LabelEdit } from '../cmps/LabelEdit';\r\n\r\n\r\nclass _TaskDetails extends Component {\r\n\r\n    state = {\r\n        task: null,\r\n        isMembersModalShow: false,\r\n        isLabelsModalShow: false,\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { taskId, groupId } = this.props.match.params;\r\n        const board = this.props.currBoard;\r\n        const task = await taskService.getTaskById(taskId, groupId, board);\r\n        this.setState({ task });\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        let { name, value } = target\r\n        const { task } = this.state\r\n        this.setState({ task: { ...task, [name]: value } }, () => {\r\n            const board = this.props.currBoard;\r\n            taskService.updateTask(board, this.props.match.params.groupId, this.state.task)\r\n            this.props.saveBoard(board)\r\n        })\r\n    }\r\n\r\n    // getBtnList = () => {\r\n    //     const btns = [\r\n    //         { name: 'Members', icon: <PersonOutlineOutlinedIcon className=\"icon\" /> },\r\n    //         { name: 'Labels', icon: <LabelOutlinedIcon className=\"icon\" /> },\r\n    //         { name: 'Checklist', icon: <ListOutlinedIcon className=\"icon\" /> },\r\n    //         { name: 'Dates', icon: <TodayOutlinedIcon className=\"icon\" /> },\r\n    //         { name: 'Attachment', icon: <AttachFileOutlinedIcon className=\"icon\" /> }];\r\n    //     return btns;\r\n    // }\r\n\r\n    goBack = () => {\r\n        this.props.history.push(`/board/${this.props.match.params.boardId}`)\r\n    }\r\n\r\n    toggleModal = (modal) => {\r\n        this.setState({ ...this.state, [modal]: !this.state[modal] })\r\n    }\r\n\r\n    toggleTaskMember = (member) => {\r\n        const board = this.props.currBoard;\r\n        const { task } = this.state\r\n        taskService.toggleTaskMember(task, member)\r\n        this.setState({ ...this.state, task }, () => {\r\n            this.props.saveBoard(board)\r\n        })\r\n    }\r\n\r\n    checkIfMemberInTask = (name) => {\r\n        var patten = new RegExp(name);\r\n        return this.state.task.members?.some(member => {\r\n            return patten.test(member.fullname)\r\n        })\r\n    }\r\n\r\n    toggleEditLabels = () => {\r\n        this.setState({ isEditLabelsOpen: !this.state.isEditLabelsOpen })\r\n    }\r\n\r\n    getLableById = (labelId) => {\r\n        return this.props.currBoard.labels.find(label => label.id === 'l' + labelId)\r\n    }\r\n\r\n    getLabelProperty = (labelId) => {\r\n        const board = this.props.currBoard;\r\n        return board.labels?.find(label => label.id === 'l' + labelId)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { task } = this.state\r\n        if (!task) return <div>loading</div>\r\n        console.log(task)\r\n        const description = (task.description) || ''\r\n        const { byMember, comments, members, labelIds } = task;\r\n        const board = this.props.currBoard;\r\n        const { groupId } = this.props.match.params;\r\n        return (\r\n            <section className=\"task-details flex\">\r\n                <div className=\"window\" onClick={this.goBack}></div>\r\n                <div className=\"card flex column\">\r\n                    <div className=\"cover flex column\">\r\n                        <CloseOutlinedIcon className='btn task-details-close' onClick={this.goBack} />\r\n                        <button className=\"btn flex\">cover</button>\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        <div className=\"title flex\">\r\n                            <AssignmentOutlinedIcon className=\"taskIcon\" color=\"disabled\" />\r\n                            <Input defaultValue={task.title}\r\n                                disableUnderline\r\n                                onChange={this.handleChange}\r\n                                name=\"title\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"main flex row\">\r\n                        <div className=\"details flex column\">\r\n                            {members && <div className=\"members\">\r\n                                <h4>Members</h4>\r\n                                <AvatarGroup max={10}>\r\n                                    {members && members.map(member => {\r\n                                        return <Avatar className=\"avatar\"\r\n                                            key={member._id} src={member.imgUrl}>{utilService.getNameInitials(member.fullname)}</Avatar>\r\n                                    })}\r\n                                </AvatarGroup>\r\n                            </div>}\r\n                            {labelIds && <div className=\"labels flex\">\r\n                                {labelIds.map(labelId => {\r\n                                    const label = this.getLableById(labelId)\r\n                                    return <LabelPreview key={label.id} lable={label} />\r\n                                })}\r\n                            </div>}\r\n                            <div className=\"form flex column\">\r\n                                <h4><DescriptionOutlinedIcon className=\"icon\" color=\"disabled\" /> Description</h4>\r\n                                <TextField className=\"textarea\"\r\n                                    name=\"description\"\r\n                                    id=\"outlined-multiline-static\"\r\n                                    multiline\r\n                                    rows={1}\r\n                                    placeholder=\"add a more detailed description...\"\r\n                                    value={description}\r\n                                    variant=\"outlined\"\r\n                                    size='small'\r\n                                    onChange={this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"comments flex column\">\r\n                                {comments && comments.map(comment => {\r\n                                    return <Grid item className=\"comment flex\" key={comment.id}>\r\n                                        {comment.byMember && <Avatar src={comment.byMember.imgUrl} className=\"avatar\">{!comment.byMember.imgUrl && utilService.getNameInitials(comment.byMember.fullname)}</Avatar>}\r\n                                        <Input id=\"input-with-icon-grid\" placeholder=\"Write a comment...\" value={comment.txt}\r\n                                            disableUnderline\r\n                                            fullWidth\r\n                                        /></Grid>\r\n                                })}\r\n                                <Grid item className=\"comment flex\">\r\n                                    {byMember && <Avatar src={byMember.imgUrl} className=\"avatar\">{!byMember.imgUrl && utilService.getNameInitials(byMember.fullname)}</Avatar>}\r\n                                    <Input id=\"input-with-icon-grid \" placeholder=\"Write a comment...\" value=''\r\n                                        disableUnderline\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sidebar flex column\">\r\n                            <button className=\"btn flex\" onClick={() => this.toggleModal('isMembersModalShow')}><PersonOutlineOutlinedIcon className=\"icon\" /> Members</button>\r\n                            <button className=\"btn flex\" onClick={() => this.toggleModal('isLabelsModalShow')}><LabelOutlinedIcon className=\"icon\" /> Labels</button>\r\n                            <button className=\"btn flex\"><ListOutlinedIcon className=\"icon\" /> Checklist</button>\r\n                            <button className=\"btn flex\"><TodayOutlinedIcon className=\"icon\" /> Dates</button>\r\n                            <button className=\"btn flex\"><AttachFileOutlinedIcon className=\"icon\" /> Attachment</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.isMembersModalShow && <div className=\"modal members flex column\">\r\n                    {board.members && board.members.map(member => {\r\n                        return <div className=\"member flex\" onClick={() => this.toggleTaskMember(member)}><Avatar className=\"avatar\"\r\n                            key={member._id} src={member.imgUrl}>{utilService.getNameInitials(member.fullname)}</Avatar>\r\n                            <p>{member.fullname}</p>\r\n                            {this.checkIfMemberInTask(member.fullname) && <DoneOutlinedIcon />}\r\n                        </div>\r\n                    })}\r\n                </div>}\r\n                {this.state.isLabelsModalShow &&\r\n                    <div className=\"modal labels-list\">\r\n                        {labelIds?.map(labelId => {\r\n                            const labelProperty = this.getLabelProperty(labelId)\r\n                            console.log(labelProperty)\r\n                            return <div className=\"label\" style={{ backgroundColor: labelProperty.color }}>\r\n                                {labelProperty.title || ''}\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>}\r\n\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currBoard: state.boardModule.currBoard,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    saveBoard,\r\n}\r\n\r\n\r\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(_TaskDetails)","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\actions\\boardActions.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\taskService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\groupService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\labelService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\actions\\userActions.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\TaskList.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\GroupOptions.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\utilService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\BoardList.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\reducers\\boardReducer.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\boardService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\TaskPreview.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\LabelEdit.jsx",["153"],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\userService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\asyncStorageService.js",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\LabelPreview.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\TaskOptions.jsx",["154","155"],"import { Component } from 'react';\r\nimport { LabelsList } from './LabelsList.jsx'\r\n\r\nimport React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport class TaskOptions extends Component {\r\n    state = {\r\n        isEditLabelsOpen: false,\r\n        isChangeMembersOpen: false,\r\n        isChangeDueDateOpen: false,\r\n        task: {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    onUpdateTask = (task) => {\r\n        this.props.onToggleTaskOptions()\r\n        task = { ...task, title: this.state.task.title }\r\n        this.props.onUpdateTask(task)\r\n    }\r\n    handleChange = (ev) => {\r\n        const value = ev.target.value;\r\n        const key = ev.target.name;\r\n        this.setState({ task: { [key]: value } });\r\n    }\r\n\r\n    toggleEditLabels = () => {\r\n        this.setState({ isEditLabelsOpen: !this.state.isEditLabelsOpen })\r\n    }\r\n    toggleChangeMembers = () => {\r\n        this.setState({ isChangeMembersOpen: !this.state.isChangeMembersOpen })\r\n    }\r\n\r\n    toggleChangeDueDate = () => {\r\n        this.setState({ isChangeDueDateOpen: !this.state.isChangeDueDateOpen })\r\n    }\r\n\r\n    render() {\r\n        const { isEditLabelsOpen, isChangeMembersOpen, isChangeDueDateOpen } = this.state\r\n        const { checkLabel,updateLabel,addLabelToBoard, onRemoveLabel, onDeleteTask, onToggleTaskOptions, task, board, onAddLabel } = this.props\r\n        return (\r\n            <React.Fragment>\r\n                <div onClick={onToggleTaskOptions} className='task-options-window'></div>\r\n                <div className='task-options-container'>\r\n                    <div className='change-task-title'>\r\n                        <textarea cols='1' rows='8' type=\"text\" className='new-title-input' placeholder={task.title} name='title' onChange={this.handleChange}></textarea>\r\n                        <button onClick={() => this.onUpdateTask(task)}>Save</button>\r\n                    </div>\r\n                    <div className='options-btns'>\r\n                        <button className='options-btn' onClick={this.toggleEditLabels} >Edit Labels</button>\r\n                        {isEditLabelsOpen &&\r\n                            <LabelsList updateLabel={updateLabel} addLabelToBoard={addLabelToBoard} checkLabel={checkLabel} onRemoveLabel={onRemoveLabel} task={task} onAddLabel={onAddLabel} toggleEditLabels={this.toggleEditLabels} board={board} />\r\n                        }\r\n                        <button className='options-btn' onClick={this.toggleChangeMembers} >Change Members</button>\r\n                        <button className='options-btn' onClick={this.toggleChangeDueDate} >Change Due Date</button>\r\n                        <button className='options-btn' onClick={onDeleteTask}>Delete</button>\r\n                    </div>\r\n\r\n                    {/* <button onClick={onDeleteTask}>Delete List</button> */}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\BoardCreate.jsx",["156","157","158","159","160","161","162","163","164","165","166"],"import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { saveBoard } from '../store/actions/boardActions.js'\r\nimport Plus from '../assets/imgs/plus.png'\r\nimport tempImg from '../assets/imgs/uc.png'\r\n\r\nclass _BoardCreate extends React.Component {\r\n\r\n    state = {\r\n        isCreateHidden: true,\r\n        board: {\r\n            title: '',\r\n            bgColor: '#000',\r\n        }\r\n    }\r\n\r\n    toggleModalVisibility = (boolean) => {\r\n        this.setState({ isCreateHidden: boolean })\r\n    }\r\n\r\n    handleChange = (ev) => {\r\n        this.setState({ board: { ...this.state.board, [ev.target.name]: ev.target.value } })\r\n    }\r\n\r\n    onCreateBoard = (ev) => {\r\n        const { boards } = this.props\r\n        const lastBoardId = boards[boards.length - 1]._id\r\n\r\n        ev.preventDefault()\r\n        if (!this.state.board.title) return\r\n        this.props.saveBoard(this.state.board, lastBoardId)\r\n        this.setState({isCreateHidden: true, board: { ...this.state.board, ['title']: ''}})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-create\" onClick={() => { this.toggleModalVisibility(false) }}>\r\n                    <img className=\"plus-icon\" src={Plus} />\r\n                </div>\r\n                <form className=\"create-board\" hidden={this.state.isCreateHidden} onSubmit={this.onCreateBoard} autocomplete=\"off\">\r\n                    <input type=\"text\" name=\"title\" placeholder=\"Enter Board Name...\" onChange={this.handleChange} value={this.state.board.title}></input>\r\n                    <div className=\"board-background-options\">\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                        <div className=\"board-background-thumb\"><img src={tempImg} /></div>\r\n                    </div>\r\n                    <button>Create</button>\r\n                    <button onClick={() => { this.toggleModalVisibility(true) }}>Cancel</button>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        boards: state.boardModule.boards\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    saveBoard\r\n}\r\n\r\n\r\nexport const BoardCreate = connect(mapStateToProps, mapDispatchToProps)(_BoardCreate)","C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\BoardPreview.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\cmps\\LabelsList.jsx",[],"C:\\Users\\Roey\\Desktop\\Sprint4\\projector\\src\\services\\httpService.js",[],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":19,"column":10,"nodeType":"173","messageId":"174","endLine":19,"endColumn":19},{"ruleId":"171","severity":1,"message":"175","line":4,"column":10,"nodeType":"173","messageId":"174","endLine":4,"endColumn":20},{"ruleId":"171","severity":1,"message":"176","line":40,"column":35,"nodeType":"173","messageId":"174","endLine":40,"endColumn":54},{"ruleId":"171","severity":1,"message":"177","line":40,"column":56,"nodeType":"173","messageId":"174","endLine":40,"endColumn":75},{"ruleId":"178","severity":1,"message":"179","line":32,"column":76,"nodeType":"180","messageId":"181","endLine":32,"endColumn":89,"fix":"182"},{"ruleId":"183","severity":1,"message":"184","line":39,"column":21,"nodeType":"185","endLine":39,"endColumn":61},{"ruleId":"183","severity":1,"message":"184","line":44,"column":65,"nodeType":"185","endLine":44,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":45,"column":65,"nodeType":"185","endLine":45,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":46,"column":65,"nodeType":"185","endLine":46,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":47,"column":65,"nodeType":"185","endLine":47,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":48,"column":65,"nodeType":"185","endLine":48,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":49,"column":65,"nodeType":"185","endLine":49,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":50,"column":65,"nodeType":"185","endLine":50,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":51,"column":65,"nodeType":"185","endLine":51,"endColumn":86},{"ruleId":"183","severity":1,"message":"184","line":52,"column":65,"nodeType":"185","endLine":52,"endColumn":86},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"no-unused-vars","'LabelEdit' is defined but never used.","Identifier","unusedVar","'TitleSharp' is defined but never used.","'isChangeMembersOpen' is assigned a value but never used.","'isChangeDueDateOpen' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['title'] found.","Property","unnecessarilyComputedProperty",{"range":"188","text":"189"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",[985,994],"'title'"]